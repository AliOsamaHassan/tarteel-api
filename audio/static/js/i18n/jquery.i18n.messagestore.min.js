/*!
 * jQuery Internationalization library - Message Store
 *
 * Copyright (C) 2012 Santhosh Thottingal
 *
 * jquery.i18n is dual licensed GPLv2 or later and MIT. You don't have to do anything special to
 * choose one license or the other and you don't have to notify anyone which license you are using.
 * You are free to use UniversalLanguageSelector in commercial projects as long as the copyright
 * header is left intact. See files GPL-LICENSE and MIT-LICENSE for details.
 *
 * @licence GNU General Public Licence 2.0 or later
 * @licence MIT License
 */(function(a){'use strict';function b(b){var c=a.Deferred();return a.getJSON(b).done(c.resolve).fail(function(d,e,f){a.i18n.log('Error in loading messages from '+b+' Exception: '+f),c.resolve()}),c.promise()}/**
	 * See https://github.com/wikimedia/jquery.i18n/wiki/Specification#wiki-Message_File_Loading
	 */var c=function(){this.messages={},this.sources={}};c.prototype={/**
		 * General message loading API This can take a URL string for
		 * the json formatted messages.
		 * <code>load('path/to/all_localizations.json');</code>
		 *
		 * This can also load a localization file for a locale <code>
		 * load( 'path/to/de-messages.json', 'de' );
		 * </code>
		 * A data object containing message key- message translation mappings
		 * can also be passed Eg:
		 * <code>
		 * load( { 'hello' : 'Hello' }, optionalLocale );
		 * </code> If the data argument is
		 * null/undefined/false,
		 * all cached messages for the i18n instance will get reset.
		 *
		 * @param {string|Object} source
		 * @param {string} locale Language tag
		 * @return {jQuery.Promise}
		 */load:function(c,d){var e=null,f=null,g=[],h=this;if('string'==typeof c)return a.i18n.log('Loading messages from: '+c),f=b(c).done(function(a){h.set(d,a)}),f.promise();if(d)return h.set(d,c),a.Deferred().resolve();// source is a key-value pair of locales and their source
for(e in c)Object.prototype.hasOwnProperty.call(c,e)&&(// No {locale} given, assume data is a group of languages,
// call this function again for each language.
d=e,g.push(h.load(c[e],d)));return a.when.apply(a,g)},/**
		 * Set messages to the given locale.
		 * If locale exists, add messages to the locale.
		 *
		 * @param {string} locale
		 * @param {Object} messages
		 */set:function(b,c){this.messages[b]=this.messages[b]?a.extend(this.messages[b],c):c},/**
		 *
		 * @param {string} locale
		 * @param {string} messageKey
		 * @return {boolean}
		 */get:function(a,b){return this.messages[a]&&this.messages[a][b]}},a.extend(a.i18n.messageStore,new c)})(jQuery);
