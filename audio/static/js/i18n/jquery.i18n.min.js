/*!
 * jQuery Internationalization library
 *
 * Copyright (C) 2012 Santhosh Thottingal
 *
 * jquery.i18n is dual licensed GPLv2 or later and MIT. You don't have to do
 * anything special to choose one license or the other and you don't have to
 * notify anyone which license you are using. You are free to use
 * UniversalLanguageSelector in commercial projects as long as the copyright
 * header is left intact. See files GPL-LICENSE and MIT-LICENSE for details.
 *
 * @licence GNU General Public Licence 2.0 or later
 * @licence MIT License
 */(function(a){'use strict';var b,c=Array.prototype.slice;/**
	 * @constructor
	 * @param {Object} options
	 *//**
	 * Process a message from the $.I18N instance
	 * for the current document, stored in jQuery.data(document).
	 *
	 * @param {string} key Key of the message.
	 * @param {string} param1 [param...] Variadic list of parameters for {key}.
	 * @return {string|$.I18N} Parsed message, or if no key was given
	 * the instance of $.I18N is returned.
	 *//* Static members */// Expose constructor
b=function(c){// Load defaults
this.options=a.extend({},b.defaults,c),this.parser=this.options.parser,this.locale=this.options.locale,this.messageStore=this.options.messageStore,this.languages={}},b.prototype={/**
		 * Localize a given messageKey to a locale.
		 * @param {String} messageKey
		 * @return {String} Localized message
		 */localize:function(b){var c,d,e,f,g,h;for(e=this.locale,f=0;e;){c=e.split('-'),d=c.length;do{if(g=c.slice(0,d).join('-'),h=this.messageStore.get(g,b),h)return h;d--}while(d);if('en'===e)break;e=a.i18n.fallbacks[this.locale]&&a.i18n.fallbacks[this.locale][f]||this.options.fallbackLocale,a.i18n.log('Trying fallback locale for '+this.locale+': '+e+' ('+b+')'),f++}// key not found
return''},/*
		 * Destroy the i18n instance.
		 */destroy:function(){a.removeData(document,'i18n')},/**
		 * General message loading API This can take a URL string for
		 * the json formatted messages. Example:
		 * <code>load('path/to/all_localizations.json');</code>
		 *
		 * To load a localization file for a locale:
		 * <code>
		 * load('path/to/de-messages.json', 'de' );
		 * </code>
		 *
		 * To load a localization file from a directory:
		 * <code>
		 * load('path/to/i18n/directory', 'de' );
		 * </code>
		 * The above method has the advantage of fallback resolution.
		 * ie, it will automatically load the fallback locales for de.
		 * For most usecases, this is the recommended method.
		 * It is optional to have trailing slash at end.
		 *
		 * A data object containing message key- message translation mappings
		 * can also be passed. Example:
		 * <code>
		 * load( { 'hello' : 'Hello' }, optionalLocale );
		 * </code>
		 *
		 * A source map containing key-value pair of languagename and locations
		 * can also be passed. Example:
		 * <code>
		 * load( {
		 * bn: 'i18n/bn.json',
		 * he: 'i18n/he.json',
		 * en: 'i18n/en.json'
		 * } )
		 * </code>
		 *
		 * If the data argument is null/undefined/false,
		 * all cached messages for the i18n instance will get reset.
		 *
		 * @param {string|Object} source
		 * @param {string} locale Language tag
		 * @return {jQuery.Promise}
		 */load:function(b,c){var d,e,f,g={};if(b||c||(b='i18n/'+a.i18n().locale+'.json',c=a.i18n().locale),'string'==typeof b&&// source extension should be json, but can have query params after that.
'json'!==b.split('?')[0].split('.').pop()){for(g[c]=b+'/'+c+'.json',d=(a.i18n.fallbacks[c]||[]).concat(this.options.fallbackLocale),e=0;e<d.length;e++)f=d[e],g[f]=b+'/'+f+'.json';return this.load(g)}return this.messageStore.load(b,c)},/**
		 * Does parameter and magic word substitution.
		 *
		 * @param {string} key Message key
		 * @param {Array} parameters Message parameters
		 * @return {string}
		 */parse:function(b,c){var d=this.localize(b);// FIXME: This changes the state of the I18N object,
// should probably not change the 'this.parser' but just
// pass it to the parser.
return this.parser.language=a.i18n.languages[a.i18n().locale]||a.i18n.languages['default'],''===d&&(d=b),this.parser.parse(d,c)}},a.i18n=function(d,e){var f,g=a.data(document,'i18n'),h='object'==typeof d&&d;// If the locale option for this call is different then the setup so far,
// update it automatically. This doesn't just change the context for this
// call but for all future call as well.
// If there is no i18n setup yet, don't do this. It will be taken care of
// by the `new I18N` construction below.
// NOTE: It should only change language for this one call.
// Then cache instances of I18N somewhere.
return h&&h.locale&&g&&g.locale!==h.locale&&(g.locale=h.locale),g||(g=new b(h),a.data(document,'i18n',g)),'string'==typeof d?(f=void 0===e?[]:c.call(arguments,1),g.parse(d,f)):g},a.fn.i18n=function(){var c=a.data(document,'i18n');return c||(c=new b,a.data(document,'i18n',c)),this.each(function(){var b,d,e,f,g=a(this),h=g.data('i18n');h?(b=h.indexOf('['),d=h.indexOf(']'),-1!==b&&-1!==d&&b<d?(e=h.slice(b+1,d),f=h.slice(d+1),'html'===e?g.html(c.parse(f)):g.attr(e,c.parse(f))):g.html(c.parse(h))):g.find('[data-i18n]').i18n()})},a.i18n.languages={},a.i18n.messageStore=a.i18n.messageStore||{},a.i18n.parser={// The default parser only handles variable substitution
parse:function(a,b){return a.replace(/\$(\d+)/g,function(a,c){var d=parseInt(c,10)-1;return b[d]===void 0?'$'+c:b[d]})},emitter:{}},a.i18n.fallbacks={},a.i18n.debug=!1,a.i18n.log=function()/* arguments */{window.console&&a.i18n.debug&&window.console.log.apply(window.console,arguments)},b.defaults={locale:function(){var b=a('html').attr('lang');return b||(b=navigator.language||navigator.userLanguage||''),b}(),fallbackLocale:'en',parser:a.i18n.parser,messageStore:a.i18n.messageStore},a.i18n.constructor=b})(jQuery);
